package com.example.jsonxml;

import androidx.appcompat.app.AppCompatActivity;

import android.os.Bundle;
import android.view.View;
import android.widget.TextView;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;

import java.io.IOException;
import java.io.InputStream;
import java.io.UnsupportedEncodingException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;

public class MainActivity extends AppCompatActivity {

    TextView resxml, resjson;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        resxml = findViewById(R.id.resxml);
        resjson = findViewById(R.id.resjson);
    }

    public void parsexml(View view) {
        try {
            InputStream is = getAssets().open("city.xml");
            DocumentBuilderFactory dbfactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dbuilder = dbfactory.newDocumentBuilder();
            Document doc = dbuilder.parse(is);
            Element element = doc.getDocumentElement();
            element.normalize();

            NodeList nodelist = doc.getElementsByTagName("place");
            resxml.setText("XML DATA");

            for (int i = 0; i < nodelist.getLength(); i++) {
                Node node = nodelist.item(i);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element element1 = (Element) node;

                    resxml.setText(resxml.getText() + "\n City_Name:" + getValue("City_Name", element1) + "\n");
                    resxml.setText(resxml.getText() + "\n Latitude:" + getValue("Latitude", element1) + "\n");
                    resxml.setText(resxml.getText() + "\n Longitude:" + getValue("Longitude", element1) + "\n");
                    resxml.setText(resxml.getText() + "\n Temperature:" + getValue("Temperature", element1) + "\n");
                    resxml.setText(resxml.getText() + "\n Humidity:" + getValue("Humidity", element1) + "\n");
                }
            }
        } catch (IOException | ParserConfigurationException | SAXException e) {
            e.printStackTrace();
        }

    }

    private static String getValue(String tag, Element element) {
        NodeList nodelist = element.getElementsByTagName(tag).item(0).getChildNodes();
        Node node = nodelist.item(0);
        return node.getNodeValue();
    }

    public void parsejson(View view) {
        try {
            InputStream is = getAssets().open("city.json");
            int size = is.available();
            byte[] buffer = new byte[size];
            is.read(buffer);
            is.close();

            String json = new String(buffer, "UTF-8");
            JSONArray jsonArray = new JSONArray(json);

            resjson.setText("JSON DATA");
            for (int i = 0; i < jsonArray.length(); i++) {
                JSONObject obj = jsonArray.getJSONObject(i);
                resjson.setText(resjson.getText() + "\n City_name:" + obj.getString("City_Name") + "\n");
                resjson.setText(resjson.getText() + "\n Latitude:" + obj.getString("Latitude") + "\n");
                resjson.setText(resjson.getText() + "\n Longitude:" + obj.getString("Longitude") + "\n");
                resjson.setText(resjson.getText() + "\n Temperature:" + obj.getString("Temperature") + "\n");
                resjson.setText(resjson.getText() + "\n Humidity:" + obj.getString("Humidity") + "\n");
            }


        }catch (IOException | JSONException e){
            e.printStackTrace();
        }
    }
}